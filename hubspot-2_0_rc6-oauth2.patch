diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 0000000..d159169
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,339 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/hubspot.admin.inc b/hubspot.admin.inc
index f105abf..fe4ee50 100644
--- a/hubspot.admin.inc
+++ b/hubspot.admin.inc
@@ -36,7 +36,25 @@ function hubspot_admin_settings() {
       "dashboard-plus" is your Portal ID.'),
   );

-  if (variable_get('hubspot_portalid', '')) {
+  $form['settings']['hubspot_client_id'] = array(
+    '#type' => 'textfield',
+    '#title' => t('HubSpot Client ID'),
+    '#default_value' => variable_get('hubspot_client_id', ''),
+  );
+
+  $form['settings']['hubspot_client_secret'] = array(
+    '#type' => 'textfield',
+    '#title' => t('HubSpot Client Secret'),
+    '#default_value' => variable_get('hubspot_client_secret', ''),
+  );
+
+  $form['settings']['hubspot_scope'] = array(
+    '#type' => 'textfield',
+    '#title' => t('HubSpot Scope'),
+    '#default_value' => variable_get('hubspot_scope', 'contacts forms'),
+  );
+
+  if (variable_get('hubspot_client_id', '') && variable_get('hubspot_client_secret', '')) {
     $form['settings']['hubspot_authentication'] = array(
       '#value' => t('Connect Hubspot Account'),
       '#type' => 'submit',
@@ -81,95 +99,6 @@ function hubspot_admin_settings() {
     '#description' => t('Email error reports to this address if debugging is enabled.'),
   );

-  $form['webforms'] = array(
-    '#title' => t('Webforms'),
-    '#type' => 'fieldset',
-    '#collapsible' => TRUE,
-    '#group' => 'additional_settings',
-    '#description' => 'The following webforms have been detected and can be configured to submit to the HubSpot API.',
-    '#tree' => TRUE,
-  );
-
-  $webform_nodes = variable_get('webform_node_types', array('webform'));
-  $nodes = array();
-
-  $hubspot_forms = _hubspot_get_forms();
-
-  if (isset($hubspot_forms['error'])) {
-    $form['webforms']['#description'] = $hubspot_forms['error'];
-  }
-  else {
-    if (empty($hubspot_forms['value'])) {
-      $form['webforms']['#description'] = t('No HubSpot forms found. You will need to create a form on HubSpot before you can configure it here.');
-    }
-    else {
-      $hubspot_form_options = array("--donotmap--" => "Do Not Map");
-      $hubspot_field_options = array();
-      foreach ($hubspot_forms['value'] as $hubspot_form) {
-        $hubspot_form_options[$hubspot_form['guid']] = $hubspot_form['name'];
-        $hubspot_field_options[$hubspot_form['guid']]['fields']['--donotmap--'] = "Do Not Map";
-        foreach ($hubspot_form['fields'] as $hubspot_field) {
-          $hubspot_field_options[$hubspot_form['guid']]['fields'][$hubspot_field['name']] = $hubspot_field['label'] . ' (' . $hubspot_field['fieldType'] . ')';
-        }
-      }
-
-      foreach ($webform_nodes as $node_type) {
-        $query = new EntityFieldQuery();
-
-        $query->entityCondition('entity_type', 'node')
-          ->entityCondition('bundle', $node_type)
-          ->propertyCondition('status', 1);
-
-        $result = $query->execute();
-
-        if (isset($result['node'])) {
-          $node_ids = array_keys($result['node']);
-          $nodes = array_merge($nodes, entity_load('node', $node_ids));
-        }
-      }
-
-      foreach ($nodes as $node) {
-        $nid = $node->nid;
-        $form['webforms']['nid-' . $nid] = array(
-          '#title' => $node->title,
-          '#type' => 'fieldset',
-        );
-
-        $form['webforms']['nid-' . $nid]['hubspot_form'] = array(
-          '#title' => t('HubSpot form'),
-          '#type' => 'select',
-          '#options' => $hubspot_form_options,
-          '#default_value' => _hubspot_default_value($nid),
-        );
-
-        foreach ($hubspot_form_options as $key => $value) {
-          if ($key != '--donotmap--') {
-            $form['webforms']['nid-' . $nid][$key] = array(
-              '#title' => t('Field mappings for @field', array('@field' => $value)),
-              '#type' => 'fieldset',
-              '#states' => array(
-                'visible' => array(
-                  ':input[name="webforms[nid-' . $nid . '][hubspot_form]"]' => array('value' => $key),
-                ),
-              ),
-            );
-
-            foreach ($node->webform['components'] as $component) {
-              if ($component['type'] !== 'markup') {
-                $form['webforms']['nid-' . $nid][$key][$component['form_key']] = array(
-                  '#title' => $component['name'] . ' (' . $component['type'] . ')',
-                  '#type' => 'select',
-                  '#options' => $hubspot_field_options[$key]['fields'],
-                  '#default_value' => _hubspot_default_value($nid, $key, $component['form_key']),
-                );
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-
   $form['submit'] = array(
     '#type' => 'submit',
     '#value' => ('Save Configuration'),
@@ -183,31 +112,15 @@ function hubspot_admin_settings() {
  */
 function hubspot_admin_settings_submit($form, &$form_state) {
   variable_set('hubspot_portalid', $form_state['values']['hubspot_portalid']);
+  variable_set('hubspot_client_id', $form_state['values']['hubspot_client_id']);
+  variable_set('hubspot_client_secret', $form_state['values']['hubspot_client_secret']);
+  variable_set('hubspot_scope', $form_state['values']['hubspot_scope']);
   variable_set('hubspot_debug_email', $form_state['values']['hubspot_debug_email']);
   variable_set('hubspot_debug_on', $form_state['values']['hubspot_debug_on']);
   variable_set('hubspot_log_code', $form_state['values']['hubspot_log_code']);

   $txn = db_transaction();

-  // Check if webform values even exist before continuing.
-  if (isset($form_state['values']['webforms'])) {
-    foreach ($form_state['values']['webforms'] as $key => $settings) {
-      db_delete('hubspot')->condition('nid', str_replace('nid-', '', $key))->execute();
-
-      if ($settings['hubspot_form'] != '--donotmap--') {
-        foreach ($settings[$settings['hubspot_form']] as $webform_field => $hubspot_field) {
-          $fields = array(
-            'nid' => str_replace('nid-', '', $key),
-            'hubspot_guid' => $settings['hubspot_form'],
-            'webform_field' => $webform_field,
-            'hubspot_field' => $hubspot_field,
-          );
-          db_insert('hubspot')->fields($fields)->execute();
-        }
-      }
-    }
-  }
-
   drupal_set_message(t('The configuration options have been saved.'));
 }

@@ -229,14 +142,16 @@ function hubspot_admin_settings_validate($form, &$form_state) {
  * Form submission handler for hubspot_admin_settings().
  */
 function hubspot_oauth_submit($form, &$form_state) {
+  $client_id = variable_get('hubspot_client_id', '');
+  $scope = variable_get('hubspot_scope', 'contacts forms');
+
   $data = array(
-    'client_id' => HUBSPOT_CLIENT_ID,
-    'portalId' => $form_state['values']['hubspot_portalid'],
+    'client_id' => $client_id,
     'redirect_uri' => url('hubspot/oauth', array('query' => drupal_get_destination(), 'absolute' => TRUE)),
-    'scope' => HUBSPOT_SCOPE,
+    'scope' => $scope,
   );

-  $form_state['redirect'][] = url('https://app.hubspot.com/auth/authenticate', array('query' => $data));
+  $form_state['redirect'][] = url('https://app.hubspot.com/oauth/authorize', array('query' => $data));
 }

 /**
@@ -245,17 +160,56 @@ function hubspot_oauth_submit($form, &$form_state) {
  * Saves OAuth tokens from HubSpot and redirects user.
  */
 function hubspot_oauth_connect() {
-  if (!empty($_GET['access_token']) && !empty($_GET['refresh_token']) && !empty($_GET['expires_in'])) {
-    drupal_set_message(t('Successfully authenticated with Hubspot.'), 'status', FALSE);
+  if (!empty($_GET['code'])) {
+
+    $client_id = variable_get('hubspot_client_id', '');
+    $client_secret = variable_get('hubspot_client_secret', '');
+    $redirect_uri = url('hubspot/oauth', array('query' => drupal_get_destination(), 'absolute' => TRUE));
+    $code = $_GET['code'];
+
+    // Get OAuth 2.0 Access Token and Refresh Tokens
+    $url = 'https://api.hubapi.com/oauth/v1/token';
+
+    $data = array(
+      'grant_type' => 'authorization_code',
+      'client_id' => $client_id,
+      'client_secret' => $client_secret,
+      'redirect_uri' => $redirect_uri,
+      'code' => $code,
+    );
+
+    $options = array(
+      'headers' => array(
+        'Content-Type' => 'application/x-www-form-urlencoded',
+      ),
+      'method' => 'POST',
+      'data' => drupal_http_build_query($data),
+    );
+
+    $response = drupal_http_request($url, $options);
+
+    if (isset($response->code) && $response->code == '200' && !empty($response->data)) {
+      $response_data = drupal_json_decode($response->data);

-    variable_set('hubspot_access_token', $_GET['access_token']);
-    variable_set('hubspot_refresh_token', $_GET['refresh_token']);
-    variable_set('hubspot_expires_in', $_GET['expires_in']);
+      variable_set('hubspot_access_token', $response_data['access_token']);
+      variable_set('hubspot_refresh_token', $response_data['refresh_token']);
+      variable_set('hubspot_expires_in', $response_data['expires_in']);
+
+      drupal_set_message(t('Successfully authenticated with Hubspot.'));
+    }
+    else {
+      $response_data = !empty($response->data) ? $response->data : '';
+
+      drupal_set_message(t('Failed to get access token and refresh token. Error = %error', array('%error' => $response_data)), 'error');
+      watchdog('hubspot', $response_data, array(), 'error');
+    }
   }

-  if (!empty($_GET['error']) && $_GET['error'] == "access_denied") {
-    drupal_set_message(t('You denied the request for authentication with Hubspot. Please click the button again and
-      choose the AUTHORIZE option.'), 'error', FALSE);
+  if (!empty($_GET['error'])) {
+    $error_code = $_GET['error'];
+    $error_description = !empty($_GET['error_description']) ? $_GET['error_description'] : '';
+
+    drupal_set_message(t('Authorization failed. Error = @error_code, Description = @error_description', array('@error_code' => $error_code, '@error_description' => $error_description)), 'error', FALSE);
   }

   drupal_goto();
diff --git a/hubspot.info b/hubspot.info
index 1eeb331..113284f 100644
--- a/hubspot.info
+++ b/hubspot.info
@@ -1,7 +1,12 @@
 name = HubSpot Drupal integration
 description = "Provides HubSpot leads API integration with Drupal. Works with Hubspots OAuth implementation"
 core = 7.x
-dependencies[] = webform (>=7.x-4.x)
-dependencies[] = libraries
-configure = admin/config/sevices/hubspot
+dependencies[] = automate
+configure = admin/config/services/hubspot
 package = HubSpot
+
+; Information added by Drupal.org packaging script on 2018-05-29
+version = "7.x-2.0-rc6+9-dev"
+core = "7.x"
+project = "hubspot"
+datestamp = "1527595697"
diff --git a/hubspot.install b/hubspot.install
index dbfca44..73e35ad 100644
--- a/hubspot.install
+++ b/hubspot.install
@@ -25,12 +25,15 @@ function hubspot_uninstall() {
   variable_del('hubspot_refresh_token');
   variable_del('hubspot_expires_in');
   variable_del('hubspot_portalid');
+  variable_del('hubspot_client_id');
+  variable_del('hubspot_client_secret');
+  variable_del('hubspot_scope');
 }

 /**
- * Implements hook_schema().
+ * Initial introduction of the schema.
  */
-function hubspot_schema() {
+function hubspot_update_7201() {
   $schema['hubspot'] = array(
     'description' => 'Base table for hubspot. Stores field mappings from webform fields to hubspot form fields.',
     'fields' => array(
@@ -63,44 +66,14 @@ function hubspot_schema() {
       ),
     ),
   );
-  return $schema;
+  db_create_table('hubspot', $schema['hubspot']);
 }

 /**
- * Initial introduction of the schema.
+ * Enable automate and hubspot_webform module.
  */
-function hubspot_update_7201() {
-  $schema['hubspot'] = array(
-    'description' => 'Base table for hubspot. Stores field mappings from webform fields to hubspot form fields.',
-    'fields' => array(
-      'nid' => array(
-        'description' => 'The node id of the webform for this row.',
-        'type' => 'int',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-        'default' => 0,
-      ),
-      'hubspot_guid' => array(
-        'description' => 'The hubspot form guid for this row.',
-        'type' => 'text',
-      ),
-      'webform_field' => array(
-        'description' => 'The webform field key for this row.',
-        'type' => 'text',
-      ),
-      'hubspot_field' => array(
-        'description' => 'The hubspot field key for this row.',
-        'type' => 'text',
-      ),
-    ),
-    'indexes' => array(
-      'nid' => array(
-        'nid',
-        array('hubspot_guid', 128),
-        array('webform_field', 128),
-        array('hubspot_field', 128),
-      ),
-    ),
-  );
-  db_create_table('hubspot', $schema['hubspot']);
+function hubspot_update_7202() {
+  module_enable(array('automate', 'hubspot_webform'));
+
+  return t('Enabled automate and hubspot_webform module.');
 }
diff --git a/hubspot.module b/hubspot.module
index ad66cd0..b4bc2d3 100644
--- a/hubspot.module
+++ b/hubspot.module
@@ -4,9 +4,6 @@
  * Sends Webform results to HubSpot's Forms API.
  */

-define('HUBSPOT_CLIENT_ID', '734f89bf-1b88-11e1-829a-3b413536dd4c');
-define('HUBSPOT_SCOPE', 'leads-rw contacts-rw offline');
-
 /**
  * Implements hook_menu().
  */
@@ -30,18 +27,6 @@ function hubspot_menu() {
     'file' => 'hubspot.admin.inc',
   );

-  // Node HubSpot forms.
-  $items['node/%webform_menu/webform/hubspot'] = array(
-    'title' => 'HubSpot',
-    'page callback' => 'drupal_get_form',
-    'page arguments' => array('hubspot_form_settings', 1),
-    'access callback' => 'node_access',
-    'access arguments' => array('update', 1),
-    'weight' => 10,
-    'type' => MENU_LOCAL_TASK,
-    'file' => 'hubspot.settings.inc',
-  );
-
   return $items;
 }

@@ -49,10 +34,19 @@ function hubspot_menu() {
  * Refreshes HubSpot OAuth Access Token when expired.
  */
 function hubspot_oauth_refresh() {
+  $client_id = variable_get('hubspot_client_id', '');
+  $client_secret = variable_get('hubspot_client_secret', '');
+  $redirect_uri = url('hubspot/oauth', array('query' => drupal_get_destination(), 'absolute' => TRUE));
+  $refresh_token = variable_get('hubspot_refresh_token');
+
+  $url = 'https://api.hubapi.com/oauth/v1/token';
+
   $data = array(
-    'refresh_token' => variable_get('hubspot_refresh_token'),
-    'client_id' => HUBSPOT_CLIENT_ID,
     'grant_type' => 'refresh_token',
+    'client_id' => $client_id,
+    'client_secret' => $client_secret,
+    'redirect_uri' => $redirect_uri,
+    'refresh_token' => $refresh_token,
   );

   $data = drupal_http_build_query($data);
@@ -65,62 +59,35 @@ function hubspot_oauth_refresh() {
     'data' => $data,
   );

-  $return = drupal_http_request('https://api.hubapi.com/auth/v1/refresh', $options);
+  $response = drupal_http_request($url, $options);

-  if ($return->code == '200') {
-    $return_data = json_decode($return->data, TRUE);
+  if ($response->code == '200') {
+    $response_data = drupal_json_decode($response->data);

-    $hubspot_access_token = $return_data['access_token'];
-    variable_set('hubspot_access_token', $hubspot_access_token);
+    $access_token = $response_data['access_token'];
+    variable_set('hubspot_access_token', $access_token);

-    $hubspot_refresh_token = $return_data['refresh_token'];
-    variable_set('hubspot_refresh_token', $hubspot_refresh_token);
+    $refresh_token = $response_data['refresh_token'];
+    variable_set('hubspot_refresh_token', $refresh_token);

-    $hubspot_expires_in = $return_data['expires_in'];
-    variable_set('hubspot_expires_in', $hubspot_expires_in);
+    $expires_in = $response_data['expires_in'];
+    variable_set('hubspot_expires_in', $expires_in);

     return TRUE;
   }
   else {
-    drupal_set_message(t('Refresh token failed with Error Code "%code: %status_message". Reconnect to your Hubspot
+    drupal_set_message(t('Failed to refresh access token. Error Code "%code: %status_message". Reconnect to your Hubspot
       account.'), 'error', FALSE);
-    watchdog('hubspot', 'Refresh token failed with Error Code "%code: %status_message". Visit the Hubspot module
+    watchdog('hubspot', 'Failed to refresh access token. Error Code "%code: %status_message". Visit the Hubspot module
       settings page and reconnect to your Hubspot account.', array(
-      '%code' => $return->code,
-      '%status_message' => $return->status_message,
+      '%code' => $response->code,
+      '%status_message' => $response->status_message,
     ), WATCHDOG_INFO);

     return FALSE;
   }
 }

-/**
- * Implements hook_mail().
- */
-function hubspot_mail($key, &$message, $params) {
-  $message['subject'] = t('HubSpot leads insertion error');
-
-  switch ($key) {
-    case 'http_error':
-      $message['body'][] = t('When attempting to submit the form "@form" to HubSpot, a HTTP error occurred.', array(
-        '@form' => $params['node_title'],
-      ));
-      break;
-
-    case 'hub_error':
-      $message['body'][] = t('Upon submitting the Webform "@form" to HubSpot, an error was returned.', array(
-        '@form' => $params['node_title'],
-      ));
-      break;
-  }
-
-  $message['body'][] = t('Error message: @message', array('@message' => $params['errormsg']));
-  $message['body'][] = t('HubSpot POST URL: @url', array('@url' => $params['hubspot_url']));
-  $message['body'][] = t('To adjust the debugging settings, visit @url', array(
-    '@url' => url('admin/config/content/hubspot', array('absolute' => TRUE))
-  ));
-}
-
 /**
  * Implements hook_page_build().
  *
@@ -196,8 +163,10 @@ function hubspot_block_view($delta = '') {
       foreach ($leads['Data']->contacts as $lead) {
         foreach ($leads['Data']->contacts as $lead) {
           // Note that $lead->insertedAt is in ms, not seconds, since the epoch.
-          $block['content']['#items'][] = l($lead->properties->firstname->value . ' ' .
-            $lead->properties->lastname->value, $lead->{'profile-url'}) . ' ' . t('(@time ago)', array(
+          $firstname = isset($lead->properties->firstname->value) ? $lead->properties->firstname->value : '';
+          $lastname = isset($lead->properties->lastname->value) ? $lead->properties->lastname->value : t('unknown');
+          $block['content']['#items'][] = l($firstname . ' ' .
+            $lastname, $lead->{'profile-url'}) . ' ' . t('(@time ago)', array(
               '@time' => format_interval(time() - floor($lead->addedAt / 1000))
             ));
         }
@@ -242,255 +211,3 @@ function hubspot_get_recent($n = 5) {
     'HTTPCode' => $result->code
   );
 }
-
-/**
- * Implements hook_webform_submission_insert().
- *
- * Intercepts the WebForm submission and send it off to HubSpot.
- */
-function hubspot_webform_submission_insert($node, $submission) {
-  // Get the Webform version
-  $webform_path = drupal_get_path('module', 'webform') . '/webform.info';
-  $webform_info = drupal_parse_info_file($webform_path);
-
-  $matches = array();
-
-  if (preg_match('/^(\d+\.x-)?(\d+)\..*$/', $webform_info['version'], $matches)) {
-    $webform_major_version = $matches[2];
-  }
-
-  if ($submission->is_draft == 1) {
-    return;
-  }
-
-  $hubspot_portalid = variable_get('hubspot_portalid', '');
-  $hubspot_form_guid = db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(
-    ':nid' => $node->nid,
-  ))->fetchField();
-
-  if (empty($hubspot_portalid) || empty($hubspot_form_guid)) {
-    return;
-  }
-
-  $fields = array();
-
-  // These fields must be submitted with each request.
-  $hs_context = array(
-    'hutk' => isset($_COOKIE['hubspotutk']) ? $_COOKIE['hubspotutk'] : '',
-    'ipAddress' => ip_address(),
-    'pageName' => $node->title,
-    'pageUrl' => url('node/' . $node->nid, array('absolute' => TRUE)),
-  );
-
-  $fields['hs_context'] = drupal_json_encode($hs_context);
-
-  foreach ($node->webform['components'] as $data_id => $data) {
-    // Skip if there is no data
-    if (!isset($submission->data[$data_id])) {
-      continue;
-    }
-    else {
-      // Get the component value (submission structure differs from Webform 3 and 4).
-      // https://drupal.org/node/1609324#submission-structure
-      $component_data = $webform_major_version <= 3 ? $submission->data[$data_id]['value'] : $submission->data[$data_id];
-    }
-
-    $sql = "SELECT hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND h.webform_field = :webform_field";
-
-    if ($data['type'] == 'addressfield' && module_exists('addressfield_tokens')) {
-      $addressfield_fields = addressfield_tokens_components();
-      $addressfield_data = unserialize($component_data[0]);
-
-      foreach ($addressfield_fields as $addressfield_key => $addressfield_values) {
-        $result = db_query($sql, array(':nid' => $node->nid, ':guid' => $hubspot_form_guid, ':webform_field' => $data['form_key'] . '_' . $addressfield_key))->fetchField();
-
-        $result = db_query_range($sql, 0, 1, array(
-          ':nid' => $node->nid,
-          ':guid' => $hubspot_form_guid,
-          ':webform_field' => $data['form_key'] . '_' . $addressfield_key,
-        ))->fetchField();
-
-        if ($result && $result != '--donotmap--') {
-          $fields[$result] = $addressfield_data[$addressfield_key];
-        }
-      }
-    }
-    else {
-      $result = db_query_range($sql, 0, 1, array(
-        ':nid' => $node->nid,
-        ':guid' => $hubspot_form_guid,
-        ':webform_field' => $data['form_key'],
-      ))->fetchField();
-
-      if ($result && $result != '--donotmap--') {
-        if (count($component_data) > 1) {
-          $fields[$result] = '';
-          foreach ($component_data as $value) {
-            if (!empty($fields[$result])) {
-              $fields[$result] .= ';' . $value;
-            }
-            else {
-              $fields[$result] .= $value;
-            }
-          }
-        }
-        elseif (isset($component_data[0])) {
-          $fields[$result] = $component_data[0];
-        }
-      }
-    }
-  }
-
-  $result = hubspot_insert_lead($hubspot_portalid, $hubspot_form_guid, $fields);
-
-  if ($result['HTTPCode'] == '204') {
-    watchdog('hubspot', 'Webform "%form" results succesfully submitted to HubSpot. Post: @post - Response: @msg', array(
-      '@post' => strip_tags($result['POST']),
-      '@msg' => strip_tags($result['Data']),
-      '%form' => $node->title,
-    ), WATCHDOG_INFO);
-  }
-  elseif (!empty($result['Error'])) {
-    watchdog('hubspot', 'HTTP error when submitting HubSpot data from Webform "%form": @error', array(
-      '@error' => $result['Error'],
-      '%form' => $node->title,
-    ), WATCHDOG_ERROR);
-
-    if (variable_get('hubspot_debug_on', 0)) {
-      drupal_mail('hubspot', 'http_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
-        'errormsg' => $result['Error'],
-        'hubspot_url' => $hubspot_url,
-        'node_title' => $node->title,
-      ), variable_get('site_mail', ''));
-    }
-  }
-  else {
-    watchdog('hubspot', 'HubSpot error when submitting Webform "%form": @error', array(
-      '@error' => $result['Data'],
-      '%form' => $node->title,
-    ), WATCHDOG_ERROR);
-
-    if (variable_get('hubspot_debug_on', 0)) {
-      drupal_mail('hubspot', 'hub_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
-        'errormsg' => $result['Data'],
-        'hubspot_url' => $hubspot_url,
-        'node_title' => $node->title,
-      ), variable_get('site_mail', ''));
-    }
-  }
-}
-
-/**
- * Executes the HubSpot API POST to insert a lead.
- *
- * @param string $portal_id
- *   HubSpot Portal ID to submit to.
- * @param string $form_guid
- *   HubSpot-provided Form API GUID to submit to.
- * @param array $fields
- *   Form fields, such as name and contact info.
- *
- * @return array
- *   An associative array containing:
- *   - Data: The response returned from drupal_http_request().
- *   - Error: The HTTP error message from drupal_http_request().
- *   - HTTPCode: The HTTP response code of the request.
- */
-function hubspot_insert_lead($portal_id, $form_guid, $fields) {
-  $str_post = drupal_http_build_query($fields);
-
-  // Send POST data.
-  $result = drupal_http_request('https://forms.hubspot.com/uploads/form/v2/' . $portal_id . '/' . $form_guid, array(
-    'headers' => array(
-      'Content-Type' => 'application/x-www-form-urlencoded',
-    ),
-    'method' => 'POST',
-    'data' => $str_post,
-  ));
-
-  return array(
-    'Data' => isset($result->data) ? $result->data : '',
-    'Error' => isset($result->error) ? $result->error : '',
-    'HTTPCode' => $result->code,
-    'POST' => $str_post,
-  );
-}
-
-/**
- * Implements hook_help().
- */
-function hubspot_help($path, $arg) {
-  $output = '';
-  switch ($path) {
-    case 'admin/help#hubspot':
-      $output .= '<h3>' . t('About') . '</h3>';
-      $output .= '<p>' . t('The HubSpot module provides leads integration with the HubSpot API, allowing forms created
-        with the Webform module to submit their data to HubSpot for leads tracking. It also allows you to easily embed
-        the HubSpot JavaScript tracking code in your site to track the visits of each lead. Further information is
-        available in the Drupal <a href="http://drupal.org/node/1195370">handbook pages for this module.</a>') . '</p>';
-      $output .= '<h3>' . t('Creating a HubSpot Webform') . '</h3>';
-      $output .= '<p>' . t("To have a Webform's data sent to HubSpot for leads tracking, complete the following steps:")
-        . '</p>';
-      $output .= '<ol>';
-      $output .= '<li>' . t('Connect to your HubSpot account from the HubSpot settings page (links below).') . '</li>';
-      $output .= '<li>' . t('From the Webform tab of any webform you will now see the HubSpot "subtab" link below. Click
-       on that link.') . '</li>';
-      $output .= '<li>' . t('On that page you will see a dropdown listing all of your HubSpot forms (set up from
-        HubSpot.com). Select the form you want to map to this Webform.') . '</li>';
-      $output .= '<li>' . t('Finally, just go through each Webform fields and map them to the HubSpot form fields
-        available in each dropdown. Click save and you\'re done!') . '</li>';
-      $output .= '</ol>';
-      $output .= '<p>' . t('The Webform will now automatically send any submissions directly to HubSpot form you
-        configured.') . '</p>';
-      $output .= '<h3>' . t('HubSpot Javascript tracking code') . '</h3>';
-      $output .= '<p>' . t('HubSpot supports using a JavaScript tracking system to analyze potential leads on your site.
-        You can get the JavaScript code from your HubSpot settings, under External Site Traffic Logging, and paste it
-        into the HubSpot integration settings page in Drupal to have it automatically included on every page.') . '</p>';
-      break;
-
-    case 'node/%/webform/hubspot':
-      $output .= '<p>' . t("To post this form's results to HubSpot you will need to select the HubSpot form and map the
-        webform fields to the available HubSpot fields.") . '</p>';
-      break;
-  }
-  return $output;
-}
-
-/**
- * Gets the list of forms from HubSpot via the API.
- */
-function _hubspot_get_forms() {
-  $access_token = variable_get('hubspot_access_token', '');
-
-  if (empty($access_token)) {
-    return array('error' => t('This site is not connected to a HubSpot Account.'));
-  }
-
-  $request = drupal_http_request("https://api.hubapi.com/contacts/v1/forms?access_token={$access_token}");
-
-  if ($request->code == 401) {
-    $refresh = hubspot_oauth_refresh();
-    if ($refresh) {
-      $access_token = variable_get('hubspot_access_token', '');
-      $request = drupal_http_request("https://api.hubapi.com/contacts/v1/forms?access_token={$access_token}");
-    }
-  }
-
-  return array('value' => drupal_json_decode($request->data));
-}
-
-/**
- * Returns the default value for the given arguments.
- */
-function _hubspot_default_value($nid, $hubspot_guid = NULL, $webform_field = NULL) {
-  if (empty($hubspot_guid)) {
-    return db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(':nid' => $nid))->fetchField();
-  }
-  else {
-    return db_query_range("SELECT hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND h.webform_field = :webform_field", 0, 1, array(
-      ':nid' => $nid,
-      ':guid' => $hubspot_guid,
-      ':webform_field' => $webform_field,
-    ))->fetchField();
-  }
-}
diff --git a/hubspot.settings.inc b/hubspot.settings.inc
deleted file mode 100644
index 77f8bda..0000000
--- a/hubspot.settings.inc
+++ /dev/null
@@ -1,124 +0,0 @@
-<?php
-/**
- * @file
- * Provides admin settings page to adjust form submission settings.
- */
-
-/**
- * Form constructor for the Hubspot settings form.
- *
- * @param $form
- * @param $form_state
- * @param object $node
- *   The node using Hubspot.
- *
- * @return array
- */
-function hubspot_form_settings($form, $form_state, $node) {
-  $form = array();
-
-  $hubspot_forms = _hubspot_get_forms();
-
-  if (isset($hubspot_forms['error'])) {
-    $form['webforms']['#description'] = $hubspot_forms['error'];
-  }
-  else {
-    if (empty($hubspot_forms['value'])) {
-      $form['webforms']['#description'] = t('No HubSpot forms found. You will need to create a form on HubSpot before you can configure it here.');
-    }
-    else {
-      $hubspot_form_options = array("--donotmap--" => "Do Not Map");
-      $hubspot_field_options = array();
-      foreach ($hubspot_forms['value'] as $hubspot_form) {
-        $hubspot_form_options[$hubspot_form['guid']] = $hubspot_form['name'];
-        $hubspot_field_options[$hubspot_form['guid']]['fields']['--donotmap--'] = "Do Not Map";
-
-        foreach ($hubspot_form['fields'] as $hubspot_field) {
-          $hubspot_field_options[$hubspot_form['guid']]['fields'][$hubspot_field['name']] = ($hubspot_field['label'] ? $hubspot_field['label'] : $hubspot_field['name']) . ' (' . $hubspot_field['fieldType'] . ')';
-        }
-      }
-
-      $nid = $node->nid;
-
-      $form['nid'] = array(
-        '#type' => 'hidden',
-        '#value' => $nid,
-      );
-
-      $form['hubspot_form'] = array(
-        '#title' => t('HubSpot form'),
-        '#type' => 'select',
-        '#options' => $hubspot_form_options,
-        '#default_value' => _hubspot_default_value($nid),
-      );
-
-      foreach ($hubspot_form_options as $key => $value) {
-        if ($key != '--donotmap--') {
-          $form[$key] = array(
-            '#title' => t('Field mappings for @field', array('field' => $value)),
-            '#type' => 'fieldset',
-            '#tree' => TRUE,
-            '#states' => array(
-              'visible' => array(
-                ':input[name="hubspot_form"]' => array('value' => $key),
-              ),
-            ),
-          );
-
-          foreach ($node->webform['components'] as $component) {
-            if ($component['type'] == 'addressfield' && module_exists('addressfield_tokens')) {
-              $addressfield_fields = addressfield_tokens_components();
-
-              foreach ($addressfield_fields as $addressfield_key => $addressfield_value) {
-                $form[$key][$component['form_key'] . '_' . $addressfield_key] = array(
-                  '#title' => $component['name'] . ': ' . $addressfield_value . ' (' . $component['type'] . ')',
-                  '#type' => 'select',
-                  '#options' => $hubspot_field_options[$key]['fields'],
-                  '#default_value' => _hubspot_default_value($nid, $key, $component['form_key'] . '_' . $addressfield_key),
-                );
-              }
-            }
-            elseif ($component['type'] !== 'markup') {
-              $form[$key][$component['form_key']] = array(
-                '#title' => $component['name'] . ' (' . $component['type'] . ')',
-                '#type' => 'select',
-                '#options' => $hubspot_field_options[$key]['fields'],
-                '#default_value' => _hubspot_default_value($nid, $key, $component['form_key']),
-              );
-            }
-          }
-        }
-      }
-    }
-  }
-
-  $form['submit'] = array(
-    '#type' => 'submit',
-    '#value' => ('Save Configuration'),
-  );
-
-  return $form;
-}
-
-/**
- * Submit handler for hubspot_form_settings form.
- */
-function hubspot_form_settings_submit($form, &$form_state) {
-  $txn = db_transaction();
-
-  db_delete('hubspot')->condition('nid', $form_state['values']['nid'])->execute();
-
-  if ($form_state['values']['hubspot_form'] != '--donotmap--') {
-    foreach ($form_state['values'][$form_state['values']['hubspot_form']] as $webform_field => $hubspot_field) {
-      $fields = array(
-        'nid' => $form_state['values']['nid'],
-        'hubspot_guid' => $form_state['values']['hubspot_form'],
-        'webform_field' => $webform_field,
-        'hubspot_field' => $hubspot_field,
-      );
-      db_insert('hubspot')->fields($fields)->execute();
-    }
-  }
-
-  drupal_set_message(t('The configuration options have been saved.'));
-}
diff --git a/hubspot_webform/hubspot_webform.admin.inc b/hubspot_webform/hubspot_webform.admin.inc
new file mode 100644
index 0000000..3481314
--- /dev/null
+++ b/hubspot_webform/hubspot_webform.admin.inc
@@ -0,0 +1,295 @@
+<?php
+/**
+ * @file
+ * Provides admin settings page to adjust form submission settings.
+ */
+
+/**
+ * Form constructor for the Hubspot settings form.
+ *
+ * @param $form
+ * @param $form_state
+ * @param object $node
+ *   The node using Hubspot.
+ *
+ * @return array
+ */
+function hubspot_webform_form_settings($form, $form_state, $node) {
+  $form = array();
+
+  $hubspot_forms = _hubspot_webform_get_forms();
+
+  if (isset($hubspot_forms['error'])) {
+    $form['webforms']['#description'] = $hubspot_forms['error'];
+  }
+  else {
+    if (empty($hubspot_forms['value'])) {
+      $form['webforms']['#description'] = t('No HubSpot forms found. You will need to create a form on HubSpot before you can configure it here.');
+    }
+    else {
+      $hubspot_form_options = array("--donotmap--" => "Do Not Map");
+      $hubspot_field_options = array();
+      foreach ($hubspot_forms['value'] as $hubspot_form) {
+        $hubspot_form_options[$hubspot_form['guid']] = $hubspot_form['name'];
+        $hubspot_field_options[$hubspot_form['guid']]['fields']['--donotmap--'] = "Do Not Map";
+
+        foreach ($hubspot_form['fields'] as $hubspot_field) {
+          $hubspot_field_options[$hubspot_form['guid']]['fields'][$hubspot_field['name']] = ($hubspot_field['label'] ? $hubspot_field['label'] : $hubspot_field['name']) . ' (' . $hubspot_field['fieldType'] . ')';
+        }
+      }
+
+      $nid = $node->nid;
+
+      $form['nid'] = array(
+        '#type' => 'hidden',
+        '#value' => $nid,
+      );
+
+      $form['hubspot_form'] = array(
+        '#title' => t('HubSpot form'),
+        '#type' => 'select',
+        '#options' => $hubspot_form_options,
+        '#default_value' => _hubspot_webform_default_value($nid),
+      );
+
+      foreach ($hubspot_form_options as $key => $value) {
+        if ($key != '--donotmap--') {
+          $form[$key] = array(
+            '#title' => t('Field mappings for @field', array('field' => $value)),
+            '#type' => 'fieldset',
+            '#tree' => TRUE,
+            '#states' => array(
+              'visible' => array(
+                ':input[name="hubspot_form"]' => array('value' => $key),
+              ),
+            ),
+          );
+
+          foreach ($node->webform['components'] as $component) {
+            if ($component['type'] == 'addressfield' && module_exists('addressfield_tokens')) {
+              $addressfield_fields = addressfield_tokens_components();
+
+              foreach ($addressfield_fields as $addressfield_key => $addressfield_value) {
+                $form[$key][$component['form_key'] . '_' . $addressfield_key] = array(
+                  '#title' => $component['name'] . ': ' . $addressfield_value . ' (' . $component['type'] . ')',
+                  '#type' => 'select',
+                  '#options' => $hubspot_field_options[$key]['fields'],
+                  '#default_value' => _hubspot_webform_default_value($nid, $key, $component['form_key'] . '_' . $addressfield_key),
+                );
+              }
+            }
+            elseif ($component['type'] !== 'markup') {
+              $form[$key][$component['form_key']] = array(
+                '#title' => $component['name'] . ' (' . $component['type'] . ')',
+                '#type' => 'select',
+                '#options' => $hubspot_field_options[$key]['fields'],
+                '#default_value' => _hubspot_webform_default_value($nid, $key, $component['form_key']),
+              );
+            }
+          }
+        }
+      }
+    }
+  }
+
+  $form['submit'] = array(
+    '#type' => 'submit',
+    '#value' => ('Save Configuration'),
+  );
+
+  return $form;
+}
+
+/**
+ * Submit handler for hubspot_webform_form_settings form.
+ */
+function hubspot_webform_form_settings_submit($form, &$form_state) {
+  $txn = db_transaction();
+
+  db_delete('hubspot')->condition('nid', $form_state['values']['nid'])->execute();
+
+  if ($form_state['values']['hubspot_form'] != '--donotmap--') {
+    foreach ($form_state['values'][$form_state['values']['hubspot_form']] as $webform_field => $hubspot_field) {
+      $fields = array(
+        'nid' => $form_state['values']['nid'],
+        'hubspot_guid' => $form_state['values']['hubspot_form'],
+        'webform_field' => $webform_field,
+        'hubspot_field' => $hubspot_field,
+      );
+      db_insert('hubspot')->fields($fields)->execute();
+    }
+  }
+
+  drupal_set_message(t('The configuration options have been saved.'));
+}
+
+/**
+ * Hubspot webform admin settings.
+ */
+function _hubspot_webform_admin_settings(&$form) {
+  $form['webforms'] = array(
+    '#title' => t('Webforms'),
+    '#type' => 'fieldset',
+    '#collapsible' => TRUE,
+    '#group' => 'additional_settings',
+    '#description' => 'The following webforms have been detected and can be configured to submit to the HubSpot API.',
+    '#tree' => TRUE,
+  );
+
+  $webform_nodes = variable_get('webform_node_types', array('webform'));
+  $nodes = array();
+
+  $hubspot_forms = _hubspot_webform_get_forms();
+
+  if (isset($hubspot_forms['error'])) {
+    $form['webforms']['#description'] = $hubspot_forms['error'];
+  }
+  else {
+    if (empty($hubspot_forms['value'])) {
+      $form['webforms']['#description'] = t('No HubSpot forms found. You will need to create a form on HubSpot before you can configure it here.');
+    }
+    else {
+      $hubspot_form_options = array("--donotmap--" => "Do Not Map");
+      $hubspot_field_options = array();
+      foreach ($hubspot_forms['value'] as $hubspot_form) {
+        $hubspot_form_options[$hubspot_form['guid']] = $hubspot_form['name'];
+        $hubspot_field_options[$hubspot_form['guid']]['fields']['--donotmap--'] = "Do Not Map";
+        foreach ($hubspot_form['fields'] as $hubspot_field) {
+          $hubspot_field_options[$hubspot_form['guid']]['fields'][$hubspot_field['name']] = $hubspot_field['label'] . ' (' . $hubspot_field['fieldType'] . ')';
+        }
+      }
+
+      foreach ($webform_nodes as $node_type) {
+        $query = new EntityFieldQuery();
+
+        $query->entityCondition('entity_type', 'node')
+          ->entityCondition('bundle', $node_type)
+          ->propertyCondition('status', 1);
+
+        $result = $query->execute();
+
+        if (isset($result['node'])) {
+          $node_ids = array_keys($result['node']);
+          $nodes = array_merge($nodes, entity_load('node', $node_ids));
+        }
+      }
+
+      foreach ($nodes as $node) {
+        $nid = $node->nid;
+        $form['webforms']['nid-' . $nid] = array(
+          '#title' => $node->title,
+          '#type' => 'fieldset',
+        );
+
+        $form['webforms']['nid-' . $nid]['hubspot_form'] = array(
+          '#title' => t('HubSpot form'),
+          '#type' => 'select',
+          '#options' => $hubspot_form_options,
+          '#default_value' => _hubspot_webform_default_value($nid),
+        );
+
+        foreach ($hubspot_form_options as $key => $value) {
+          if ($key != '--donotmap--') {
+            $form['webforms']['nid-' . $nid][$key] = array(
+              '#title' => t('Field mappings for @field', array('@field' => $value)),
+              '#type' => 'fieldset',
+              '#states' => array(
+                'visible' => array(
+                  ':input[name="webforms[nid-' . $nid . '][hubspot_form]"]' => array('value' => $key),
+                ),
+              ),
+            );
+
+            foreach ($node->webform['components'] as $component) {
+              if ($component['type'] !== 'markup') {
+                $form['webforms']['nid-' . $nid][$key][$component['form_key']] = array(
+                  '#title' => $component['name'] . ' (' . $component['type'] . ')',
+                  '#type' => 'select',
+                  '#options' => $hubspot_field_options[$key]['fields'],
+                  '#default_value' => _hubspot_webform_default_value($nid, $key, $component['form_key']),
+                );
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  $form['#submit'][] = 'hubspot_webform_settings_submit';
+}
+
+/**
+ * Submit handler for hubspot_webform_settings().
+ */
+function hubspot_webform_settings_submit($form, &$form_state) {
+  $txn = db_transaction();
+
+  // Check if webform values even exist before continuing.
+  if (isset($form_state['values']['webforms'])) {
+    foreach ($form_state['values']['webforms'] as $key => $settings) {
+      db_delete('hubspot')->condition('nid', str_replace('nid-', '', $key))->execute();
+
+      if ($settings['hubspot_form'] != '--donotmap--') {
+        foreach ($settings[$settings['hubspot_form']] as $webform_field => $hubspot_field) {
+          $fields = array(
+            'nid' => str_replace('nid-', '', $key),
+            'hubspot_guid' => $settings['hubspot_form'],
+            'webform_field' => $webform_field,
+            'hubspot_field' => $hubspot_field,
+          );
+          db_insert('hubspot')->fields($fields)->execute();
+        }
+      }
+    }
+  }
+}
+
+/**
+ * Gets the list of forms from HubSpot via the API.
+ */
+function _hubspot_webform_get_forms() {
+  $access_token = variable_get('hubspot_access_token', '');
+
+  if (empty($access_token)) {
+    return array('error' => t('This site is not connected to a HubSpot Account.'));
+  }
+
+  // @todo: Use '/forms/v2/forms' instead of '/contacts/v1/forms'.
+  $url = 'https://api.hubapi.com/contacts/v1/forms';
+  $options = array(
+      'headers' => array(
+          'Authorization' => 'Bearer ' . $access_token,
+          'Content-Type' => 'application/json',
+        ),
+    );
+
+  $request = drupal_http_request($url, $options);
+
+  if ($request->code == 401) {
+    $refresh = hubspot_oauth_refresh();
+    if ($refresh) {
+      $access_token = variable_get('hubspot_access_token', '');
+      $options['headers']['Authorization'] = 'Bearer ' . $access_token;
+      $request = drupal_http_request($url, $options);
+    }
+  }
+
+  return array('value' => drupal_json_decode($request->data));
+}
+
+/**
+ * Returns the default value for the given arguments.
+ */
+function _hubspot_webform_default_value($nid, $hubspot_guid = NULL, $webform_field = NULL) {
+  if (empty($hubspot_guid)) {
+    return db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(':nid' => $nid))->fetchField();
+  }
+  else {
+    return db_query_range("SELECT hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND h.webform_field = :webform_field", 0, 1, array(
+      ':nid' => $nid,
+      ':guid' => $hubspot_guid,
+      ':webform_field' => $webform_field,
+    ))->fetchField();
+  }
+}
diff --git a/hubspot_webform/hubspot_webform.info b/hubspot_webform/hubspot_webform.info
new file mode 100644
index 0000000..940ee7b
--- /dev/null
+++ b/hubspot_webform/hubspot_webform.info
@@ -0,0 +1,13 @@
+name = HubSpot Webform integration
+description = "Provides HubSpot webform integration with Drupal."
+core = 7.x
+dependencies[] = automate
+dependencies[] = hubspot
+dependencies[] = webform (>=7.x-4.x)
+package = HubSpot
+
+; Information added by Drupal.org packaging script on 2018-05-29
+version = "7.x-2.0-rc6+9-dev"
+core = "7.x"
+project = "hubspot"
+datestamp = "1527595697"
diff --git a/hubspot_webform/hubspot_webform.install b/hubspot_webform/hubspot_webform.install
new file mode 100644
index 0000000..811fe09
--- /dev/null
+++ b/hubspot_webform/hubspot_webform.install
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Implements hook_schema().
+ */
+function hubspot_webform_schema() {
+  if (!db_table_exists('hubspot')) {
+    $schema['hubspot'] = array(
+      'description' => 'Base table for hubspot. Stores field mappings from webform fields to hubspot form fields.',
+      'fields' => array(
+        'nid' => array(
+          'description' => 'The node id of the webform for this row.',
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+          'default' => 0,
+        ),
+        'hubspot_guid' => array(
+          'description' => 'The hubspot form guid for this row.',
+          'type' => 'text',
+        ),
+        'webform_field' => array(
+          'description' => 'The webform field key for this row.',
+          'type' => 'text',
+        ),
+        'hubspot_field' => array(
+          'description' => 'The hubspot field key for this row.',
+          'type' => 'text',
+        ),
+      ),
+      'indexes' => array(
+        'nid' => array(
+          'nid',
+          array('hubspot_guid', 128),
+          array('webform_field', 128),
+          array('hubspot_field', 128),
+        ),
+      ),
+    );
+    return $schema;
+  }
+}
diff --git a/hubspot_webform/hubspot_webform.module b/hubspot_webform/hubspot_webform.module
new file mode 100644
index 0000000..b7a70f1
--- /dev/null
+++ b/hubspot_webform/hubspot_webform.module
@@ -0,0 +1,238 @@
+<?php
+/**
+ * @file
+ * Sends Webform results to HubSpot's Forms API.
+ */
+
+/**
+ * Implements hook_menu().
+ */
+function hubspot_webform_menu() {
+  // Node HubSpot forms.
+  $items['node/%webform_menu/webform/hubspot'] = array(
+    'title' => 'HubSpot',
+    'page callback' => 'drupal_get_form',
+    'page arguments' => array('hubspot_webform_form_settings', 1),
+    'access callback' => 'node_access',
+    'access arguments' => array('update', 1),
+    'weight' => 10,
+    'type' => MENU_LOCAL_TASK,
+    'file' => 'hubspot_webform.admin.inc',
+  );
+
+  return $items;
+}
+
+/**
+ * Form handler for pardot_webform_form_alter().
+ *
+ * Intercepts the WebForm submission and send it off to HubSpot.
+ */
+function hubspot_webform_submit($form, &$form_state) {
+  $node = $form['#node'];
+
+  if (empty($node)) {
+    return;
+  }
+
+  $hubspot_portalid = variable_get('hubspot_portalid', '');
+  $hubspot_form_guid = db_query_range("SELECT hubspot_guid FROM {hubspot} h WHERE h.nid = :nid", 0, 1, array(
+    ':nid' => $node->nid,
+  ))->fetchField();
+
+  if (empty($hubspot_portalid) || empty($hubspot_form_guid)) {
+    return;
+  }
+
+  $fields = array();
+
+  $sql = "SELECT webform_field, hubspot_field FROM {hubspot} h WHERE h.nid = :nid AND h.hubspot_guid = :guid AND hubspot_field != :empty";
+
+  $result = db_query($sql, array(
+    ':nid' => $node->nid,
+    ':guid' => $hubspot_form_guid,
+    ':empty' => '--donotmap--',
+  ));
+
+  $field_mappings = array();
+
+  while ($row = $result->fetchObject()) {
+    $field_mappings[$row->webform_field] = array('key' => $row->hubspot_field);
+  }
+
+  $post_fields = automate_webform_values($form, $form_state);
+  $fields = automate_map_webform_values($post_fields, $field_mappings);
+
+  // These fields must be submitted with each request.
+  $hs_context = array(
+    'hutk' => isset($_COOKIE['hubspotutk']) ? $_COOKIE['hubspotutk'] : '',
+    'ipAddress' => ip_address(),
+    'pageName' => $node->title,
+    'pageUrl' => url('node/' . $node->nid, array('absolute' => TRUE)),
+  );
+
+  $fields['hs_context'] = drupal_json_encode($hs_context);
+
+  $result = hubspot_webform_insert_lead($hubspot_portalid, $hubspot_form_guid, $fields);
+
+  if ($result['HTTPCode'] == '204') {
+    watchdog('hubspot', 'Webform "%form" results succesfully submitted to HubSpot. Post: @post - Response: @msg', array(
+      '@post' => strip_tags($result['POST']),
+      '@msg' => strip_tags($result['Data']),
+      '%form' => $node->title,
+    ), WATCHDOG_INFO);
+  }
+  elseif (!empty($result['Error'])) {
+    watchdog('hubspot', 'HTTP error when submitting HubSpot data from Webform "%form": @error', array(
+      '@error' => $result['Error'],
+      '%form' => $node->title,
+    ), WATCHDOG_ERROR);
+
+    if (variable_get('hubspot_debug_on', 0)) {
+      drupal_mail('hubspot', 'http_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
+        'errormsg' => $result['Error'],
+        'hubspot_url' => $hubspot_url,
+        'node_title' => $node->title,
+      ), variable_get('site_mail', ''));
+    }
+  }
+  else {
+    watchdog('hubspot', 'HubSpot error when submitting Webform "%form": @error', array(
+      '@error' => $result['Data'],
+      '%form' => $node->title,
+    ), WATCHDOG_ERROR);
+
+    if (variable_get('hubspot_debug_on', 0)) {
+      drupal_mail('hubspot', 'hub_error', variable_get('hubspot_debug_email', variable_get('site_mail', '')), language_default(), array(
+        'errormsg' => $result['Data'],
+        'hubspot_url' => $hubspot_url,
+        'node_title' => $node->title,
+      ), variable_get('site_mail', ''));
+    }
+  }
+}
+
+/**
+ * Executes the HubSpot API POST to insert a lead.
+ *
+ * @param string $portal_id
+ *   HubSpot Portal ID to submit to.
+ * @param string $form_guid
+ *   HubSpot-provided Form API GUID to submit to.
+ * @param array $fields
+ *   Form fields, such as name and contact info.
+ *
+ * @return array
+ *   An associative array containing:
+ *   - Data: The response returned from drupal_http_request().
+ *   - Error: The HTTP error message from drupal_http_request().
+ *   - HTTPCode: The HTTP response code of the request.
+ */
+function hubspot_webform_insert_lead($portal_id, $form_guid, $fields) {
+  $str_post = drupal_http_build_query($fields);
+
+  // Send POST data.
+  $result = drupal_http_request('https://forms.hubspot.com/uploads/form/v2/' . $portal_id . '/' . $form_guid, array(
+    'headers' => array(
+      'Content-Type' => 'application/x-www-form-urlencoded',
+    ),
+    'method' => 'POST',
+    'data' => $str_post,
+  ));
+
+  return array(
+    'Data' => isset($result->data) ? $result->data : '',
+    'Error' => isset($result->error) ? $result->error : '',
+    'HTTPCode' => $result->code,
+    'POST' => $str_post,
+  );
+}
+
+/**
+ * Implements hook_mail().
+ */
+function hubspot_webform_mail($key, &$message, $params) {
+  $message['subject'] = t('HubSpot leads insertion error');
+
+  switch ($key) {
+    case 'http_error':
+      $message['body'][] = t('When attempting to submit the form "@form" to HubSpot, a HTTP error occurred.', array(
+        '@form' => $params['node_title'],
+      ));
+      break;
+
+    case 'hub_error':
+      $message['body'][] = t('Upon submitting the Webform "@form" to HubSpot, an error was returned.', array(
+        '@form' => $params['node_title'],
+      ));
+      break;
+  }
+
+  $message['body'][] = t('Error message: @message', array('@message' => $params['errormsg']));
+  $message['body'][] = t('HubSpot POST URL: @url', array('@url' => $params['hubspot_url']));
+  $message['body'][] = t('To adjust the debugging settings, visit @url', array(
+    '@url' => url('admin/config/content/hubspot', array('absolute' => TRUE))
+  ));
+}
+
+/**
+ * Implements hook_help().
+ */
+function hubspot_webform_help($path, $arg) {
+  $output = '';
+  switch ($path) {
+    case 'admin/help#hubspot':
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('The HubSpot module provides leads integration with the HubSpot API, allowing forms created
+        with the Webform module to submit their data to HubSpot for leads tracking. It also allows you to easily embed
+        the HubSpot JavaScript tracking code in your site to track the visits of each lead. Further information is
+        available in the Drupal <a href="http://drupal.org/node/1195370">handbook pages for this module.</a>') . '</p>';
+      $output .= '<h3>' . t('Creating a HubSpot Webform') . '</h3>';
+      $output .= '<p>' . t("To have a Webform's data sent to HubSpot for leads tracking, complete the following steps:")
+        . '</p>';
+      $output .= '<ol>';
+      $output .= '<li>' . t('Connect to your HubSpot account from the HubSpot settings page (links below).') . '</li>';
+      $output .= '<li>' . t('From the Webform tab of any webform you will now see the HubSpot "subtab" link below. Click
+       on that link.') . '</li>';
+      $output .= '<li>' . t('On that page you will see a dropdown listing all of your HubSpot forms (set up from
+        HubSpot.com). Select the form you want to map to this Webform.') . '</li>';
+      $output .= '<li>' . t('Finally, just go through each Webform fields and map them to the HubSpot form fields
+        available in each dropdown. Click save and you\'re done!') . '</li>';
+      $output .= '</ol>';
+      $output .= '<p>' . t('The Webform will now automatically send any submissions directly to HubSpot form you
+        configured.') . '</p>';
+      $output .= '<h3>' . t('HubSpot Javascript tracking code') . '</h3>';
+      $output .= '<p>' . t('HubSpot supports using a JavaScript tracking system to analyze potential leads on your site.
+        You can get the JavaScript code from your HubSpot settings, under External Site Traffic Logging, and paste it
+        into the HubSpot integration settings page in Drupal to have it automatically included on every page.') . '</p>';
+      break;
+    case 'node/%/webform/hubspot':
+      $output .= '<p>' . t("To post this form's results to HubSpot you will need to select the HubSpot form and map the
+        webform fields to the available HubSpot fields.") . '</p>';
+      break;
+  }
+  return $output;
+}
+
+/**
+ * Implements hook_form_alter().
+ */
+function hubspot_webform_form_alter(&$form, $form_state, $form_id) {
+  if (strstr($form_id, 'webform_client_form')) {
+    $nid = $form['details']['nid']['#value'];
+    if (empty($nid)) {
+      return;
+    }
+
+    // Check to see if this is configured for Hubspot
+    if (!db_query('SELECT count(*) FROM {hubspot} WHERE nid = :nid', array(':nid' => $nid))) {
+      return;
+    }
+
+    $form['#submit'][] = 'hubspot_webform_submit';
+  }
+  elseif (strstr($form_id, 'hubspot_admin_settings')) {
+    module_load_include('inc', 'hubspot_webform', 'hubspot_webform.admin');
+    _hubspot_webform_admin_settings($form);
+  }
+}
